---
// Este componente será una Astro Island con hidratación client-side
---

<form id="contactForm" class="contact-form flex flex-col gap-6" novalidate>
  <div class="form-row flex gap-4">
    <div class="form-group flex flex-col flex-1">
      <label for="nombre" class="mb-1 font-semibold">Nombre *</label>
      <input type="text" id="nombre" name="nombre" required
        class="rounded-md border-2 border-white/20 bg-black/30 p-3 text-white placeholder:text-gray-400 focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary transition"
        aria-describedby="nombre-error" />
      <span id="nombre-error" class="text-red-500 text-sm mt-1 hidden">Por favor ingresá tu nombre.</span>
    </div>
    <div class="form-group flex flex-col flex-1">
      <label for="apellido" class="mb-1 font-semibold">Apellido *</label>
      <input type="text" id="apellido" name="apellido" required
        class="rounded-md border-2 border-white/20 bg-black/30 p-3 text-white placeholder:text-gray-400 focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary transition"
        aria-describedby="apellido-error" />
      <span id="apellido-error" class="text-red-500 text-sm mt-1 hidden">Por favor ingresá tu apellido.</span>
    </div>
  </div>

  <div class="form-group flex flex-col">
    <label for="email" class="mb-1 font-semibold">Email *</label>
    <input type="email" id="email" name="email" required
      class="rounded-md border-2 border-white/20 bg-black/30 p-3 text-white placeholder:text-gray-400 focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary transition"
      aria-describedby="email-error" />
    <span id="email-error" class="text-red-500 text-sm mt-1 hidden">Por favor ingresá un email válido.</span>
  </div>

  <div class="form-group flex flex-col">
    <label for="motivo" class="mb-1 font-semibold">Motivo del contacto *</label>
    <select id="motivo" name="motivo" required
      class="rounded-md border-2 border-white/20 bg-black/30 p-3 text-white focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary transition">
      <option value="">Seleccioná un motivo</option>
      <option value="prensa">Prensa</option>
      <option value="partner-sponsor">Quiero ser Partner/Sponsor</option>
      <option value="jugador">Quiero ser jugador</option>
      <option value="trabajo">Quiero trabajar en PUCARA</option>
      <option value="otro">Otro</option>
    </select>
    <span id="motivo-error" class="text-red-500 text-sm mt-1 hidden">Por favor seleccioná un motivo.</span>
  </div>

  <div class="form-group flex flex-col">
    <label for="mensaje" class="mb-1 font-semibold">Mensaje *</label>
    <textarea id="mensaje" name="mensaje" rows="6" required placeholder="Contanos sobre tu propuesta o consulta..."
      class="rounded-md border-2 border-white/20 bg-black/30 p-3 text-white placeholder:text-gray-400 focus:outline-none focus:border-primary focus:ring-2 focus:ring-primary transition resize-none"
      aria-describedby="mensaje-error"></textarea>
    <span id="mensaje-error" class="text-red-500 text-sm mt-1 hidden">Por favor ingresá un mensaje.</span>
  </div>

  <!-- Google reCAPTCHA v2 -->
  <div class="form-group flex flex-col">
    <label class="mb-2 font-semibold">Verificación de seguridad *</label>
    <div class="g-recaptcha-container flex justify-center">
      <div class="g-recaptcha" 
           data-sitekey="6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"
           data-theme="dark">
      </div>
    </div>
    <span id="captcha-error" class="text-red-500 text-sm mt-1 hidden">Por favor completa la verificación reCAPTCHA.</span>
    <small class="text-gray-400 mt-1 text-center">Verifica que no eres un robot marcando la casilla</small>
  </div>

  <fieldset class="form-group checkbox-group flex items-center gap-3" aria-describedby="terminos-error">
    <label class="checkbox-label flex items-center gap-3 cursor-pointer text-sm">
      <input type="checkbox" id="terminos" name="terminos" required class="w-5 h-5 rounded border-white/20 focus:ring-primary focus:ring-2" />
      Acepto los<a href="#" class="terms-link text-primary underline hover:text-orange-400">términos y condiciones</a> *
    </label>
    <span id="terminos-error" class="text-red-500 text-sm mt-1 hidden">Tenés que aceptar los términos y condiciones.</span>
  </fieldset>

  <button type="submit"
    class="submit-btn bg-gradient-to-br from-primary to-orange-400 text-white font-bold uppercase tracking-wider py-3 px-5 rounded-md shadow-lg hover:shadow-xl transition-transform hover:-translate-y-1 self-center">
    ENVIAR MENSAJE
  </button>
</form>

<style>
  /* Esquema de color oscuro para el select */
  #motivo {
    color-scheme: dark;
  }
  
  /* Estilos para las opciones del dropdown */
  #motivo option {
    background-color: #1f1f1f !important; /* Negro más suave */
    color: white !important;
  }
  
  #motivo option:hover {
    background-color: #2a2a2a !important; /* Negro un poco más claro en hover */
  }
</style>

<script>
  class ContactFormHandler {
    private form: HTMLFormElement | null;

    constructor() {
      this.form = document.getElementById('contactForm') as HTMLFormElement;
      this.init();
    }

    private init(): void {
      if (!this.form) {
        console.error("No se encontró el formulario");
        return;
      }

      this.form.addEventListener('submit', this.handleSubmit.bind(this));
    }

    private handleSubmit(e: Event): void {
      e.preventDefault();

      const isValid = this.validateForm();
      
      if (!isValid) {
        alert('Por favor completa todos los campos requeridos correctamente.');
        return;
      }

      // El formulario es válido y el reCAPTCHA está resuelto
      const recaptchaResponse = (window as any).grecaptcha?.getResponse();
      console.log('Formulario válido, reCAPTCHA resuelto:', recaptchaResponse);
      alert('¡Gracias por tu mensaje! Te contactaremos pronto.');
      
      // Aquí puedes enviar a un servicio como Formspree, EmailJS, etc.
      // this.sendToEmailService(formData);
      
      this.resetForm();
    }

    private validateForm(): boolean {
      let isValid = true;
      
      // Validar campos básicos
      const fields = ['nombre', 'apellido', 'email', 'motivo', 'mensaje', 'terminos'];
      
      fields.forEach(fieldId => {
        const element = document.getElementById(fieldId);
        const errorElement = document.getElementById(`${fieldId}-error`);
        
        if (!element) return;

        if (fieldId === 'terminos') {
          const checkbox = element as HTMLInputElement;
          isValid = this.validateCheckbox(checkbox, errorElement) && isValid;
        } else if (fieldId === 'motivo') {
          const select = element as HTMLSelectElement;
          isValid = this.validateSelect(select, errorElement) && isValid;
        } else if (fieldId === 'email') {
          const input = element as HTMLInputElement;
          isValid = this.validateEmail(input, errorElement) && isValid;
        } else {
          const input = element as HTMLInputElement | HTMLTextAreaElement;
          isValid = this.validateRequired(input, errorElement) && isValid;
        }
      });

      // Validar reCAPTCHA
      isValid = this.validateRecaptcha() && isValid;

      return isValid;
    }

    private validateRequired(element: HTMLInputElement | HTMLTextAreaElement, errorElement: HTMLElement | null): boolean {
      if (!element.value.trim()) {
        this.showError(errorElement);
        return false;
      }
      this.hideError(errorElement);
      return true;
    }

    private validateEmail(element: HTMLInputElement, errorElement: HTMLElement | null): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(element.value)) {
        this.showError(errorElement, 'Por favor ingresá un email válido.');
        return false;
      }
      this.hideError(errorElement);
      return true;
    }

    private validateSelect(element: HTMLSelectElement, errorElement: HTMLElement | null): boolean {
      if (!element.value) {
        this.showError(errorElement);
        return false;
      }
      this.hideError(errorElement);
      return true;
    }

    private validateCheckbox(element: HTMLInputElement, errorElement: HTMLElement | null): boolean {
      if (!element.checked) {
        this.showError(errorElement);
        return false;
      }
      this.hideError(errorElement);
      return true;
    }

    private validateRecaptcha(): boolean {
      const recaptchaResponse = (window as any).grecaptcha?.getResponse();
      const captchaErrorElement = document.getElementById('captcha-error');
      
      if (!recaptchaResponse) {
        this.showError(captchaErrorElement, 'Por favor completa la verificación reCAPTCHA.');
        return false;
      }
      
      this.hideError(captchaErrorElement);
      return true;
    }

    private showError(errorElement: HTMLElement | null, message?: string): void {
      if (errorElement) {
        if (message) errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }

    private hideError(errorElement: HTMLElement | null): void {
      if (errorElement) {
        errorElement.classList.add('hidden');
      }
    }

    private resetForm(): void {
      if (this.form) {
        this.form.reset();
        
        // Reset reCAPTCHA después del envío exitoso
        if ((window as any).grecaptcha) {
          (window as any).grecaptcha.reset();
        }
      }
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new ContactFormHandler();
  });
</script>
